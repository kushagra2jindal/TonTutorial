#include "imports/stdlib.fc";
#include "imports/params.fc";

;; Contract for a simple flow 
;; - Update the Source code of contract
;; - transfer msg to sender
;; - Deposit
;; - Withdraw
;; - ChangeOwner

const int min_tons_for_storage = 1000000000; 

(slice) load_data() inline_ref {
    slice ds = get_data().begin_parse();
    return ds~load_msg_addr();
}

() save_data(slice owner_address) inline_ref {
    set_data(
        begin_cell()
        .store_slice(owner_address)
        .end_cell()
    );
}

int get_smc_balance() method_id {
    [int balance, _] = get_balance();

    return balance;
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

    slice cs = in_msg_full.begin_parse();
    int flag = cs~load_uint(4);

    ;; Check for the bouncable message, 0x18 is bouncable, 0x10 non-bouncable!
    if (flag & 1) {
        return ();
    }

    if(in_msg_body.slice_empty?()) {
        return();
    }
    ;; equivalent to msg.sender(), fetching the sender address!!
    slice sender_address = cs~load_msg_addr();
    slice owner_address = load_data();
    int op = in_msg_body~load_uint(32);

    if (op == "deposit"c) {
        return ();
    }

    if (op == "transfer_message_to_ownerr"c) {
        ifnot(equal_slices(owner_address,sender_address)) {
            cell msg_cell = begin_cell().store_slice(in_msg_body).end_cell();
            cell msg = begin_cell()
                        .store_uint(0x18, 32)
                        .store_slice(owner_address)
                        .store_coins(0)
                        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                        .store_ref(msg_cell)
                    .end_cell();
            send_raw_message(msg, 64);
        }
        return();
    }

    ;; Now throw id sender is not owner!! 
    throw_unless(404, equal_slices(owner_address, sender_address));

    if (op == "change_owner"c) {
        slice new_owner_address = in_msg_body~load_msg_addr();
        force_chain(new_owner_address);
        save_data(new_owner_address);
        return();
    }

    if (op == "withdraw"c){
        int withdraw_amount = in_msg_body~load_coins();

        throw_unless(412, get_smc_balance() >= withdraw_amount);

        int send_amount = min(withdraw_amount, my_balance - min_tons_for_storage);

        cell msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(owner_address)
                .store_coins(withdraw_amount)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
        send_raw_message(msg, 1);

        return ();
    }

    if (op == "update_svc_code"c) {
        cell new_code = in_msg_body~load_ref();
        set_code(new_code);
        
        cont old_code = get_c3();
        set_c3(new_code.begin_parse().bless());
        throw(0);
    }

    throw(0xffff);

}

(slice) get_owner_address() method_id {
    slice owner_address = load_data();
    return owner_address;
}